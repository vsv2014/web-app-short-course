#+TITLE: User Directory Application: System Interface
#+AUTHOR: VLEAD
#+DATE: [2017-01-25 Wed]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue between the =rest= and =system=.  The world of
  =rest= uses =json= and the world of =system= uses objects.  System Interface
  allows these two worlds to talk to each other.


* The =SystemInterface= class

** Constructor

#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize(cls):
        System.initialize_system(cls)

#+end_src


** Make Session
   Make a session object that the system can interpret from the email, role and
   key that are passed as strings from the REST API Layer.   These three values
   are passed as key value pairs.

   make_session: dictionary -> object

#+NAME: make_session
#+BEGIN_SRC python
    @staticmethod
    def make_session(dictionary):
        session_cls = System.delegate.entities["session"]
        try:
            user = SystemInterface.get_user_by_email(dictionary['email'])
            role = SystemInterface.make_role(dictionary['role'])
            key = str(dictionary['key'])
            session = session_cls(user=user,
                                      role=role,
                                      key=key)
            return session

        except Exception as err:
            raise err

#+END_SRC

*** Test Make Session
#+NAME: test_make_session
#+BEGIN_SRC python
class TestMakeSession(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_make_session_passes(self):
        print "test_make_session_passes"

        dictionary = {'email': Config.admin_email,
                          'role': Config.admin_role,
                          'key': "abcde" }

        session = SystemInterface.make_session(dictionary)
                                                               
        self.assertEqual(session.get("role").get("val"), Config.admin_role)
        self.assertEqual(session.get("user").get("name").get("val"),
                             Config.admin_name)
        self.assertEqual(session.get("user").get("email").get("val"),
                             Config.admin_email)

#+END_SRC


** Make User
   Make a user object that the system can interpret from name, email and role
   that are passed as strings from the upper layer which here is REST API
   Layer.  These three values are passed as key value pairs.

   make-user: dictionary -> object
#+NAME: make_user
#+BEGIN_SRC python
    @staticmethod
    def make_user(dictionary):
        user_cls = System.delegate.entities["user"]

        try:
            name = SystemInterface.make_name(dictionary['name'])
            email = SystemInterface.make_email(dictionary['email'])
            role = SystemInterface.make_role(dictionary['role'])

            user = user_cls(name=name,
                            email=email,
                            roles=[role])
            return user

        except Exception as err:
            raise err

#+END_SRC

*** Test Make User
#+NAME: test_make_user
#+BEGIN_SRC python
class TestMakeUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_make_user_passes(self):
        print "test_make_user_passes"

        dictionary = {'email': Config.admin_email,
                          'role': Config.admin_role,
                          'name': Config.admin_name
                     }

        user = SystemInterface.make_user(dictionary)
                                                               
        self.assertEqual(user.get("roles")[0].get("val"), Config.admin_role)
        self.assertEqual(user.get("name").get("val"), Config.admin_name)
        self.assertEqual(user.get("email").get("val"), Config.admin_email)

#+END_SRC


** Make Email
   Make an Email object that the system can interpret from email string. 
   make-email: string -> object
#+NAME: make_email
#+BEGIN_SRC python
    @staticmethod
    def make_email(email_str):
        email_cls = System.delegate.entities["email"]

        try:
            email = email_cls(val=email_str)
            return email
        except Exception as err:
            raise err

#+END_SRC

*** Test Make Email
#+NAME: test_make_email
#+BEGIN_SRC python
class TestMakeEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_make_email_passes(self):
        print "test_make_email_passes"

        email_str = Config.admin_email

        email = SystemInterface.make_email(email_str)
                                                               
        self.assertEqual(email.get("val"), Config.admin_email)

#+END_SRC


** Make Role
   Make an Role object that the system can interpret from role string. 
   make-role: string -> object
#+NAME: make_role
#+BEGIN_SRC python
    @staticmethod
    def make_role(role_str):
        role_cls = System.delegate.entities["role"]

        try:
            role = role_cls(val=role_str)
            return role
        except Exception as err:
            raise err

#+END_SRC

*** Test Make Role
#+NAME: test_make_role
#+BEGIN_SRC python
class TestMakeRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_make_role_passes(self):
        print "test_make_role_passes"

        role_str = Config.admin_role

        role = SystemInterface.make_role(role_str)
                                                               
        self.assertEqual(role.get("val"), Config.admin_role)

#+END_SRC


** Make Name
   Make an Name object that the system can interpret from name string. 
   make-name: string -> object
#+NAME: make_name
#+BEGIN_SRC python
    @staticmethod
    def make_name(name_str):
        name_cls = System.delegate.entities["name"]

        try:
            name = name_cls(val=name_str)
            return name
        
        except Exception as err:
            raise err

#+END_SRC

*** Test Make Name
#+NAME: test_make_name
#+BEGIN_SRC python
class TestMakeName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_make_name_passes(self):
        print "test_make_name_passes"

        name_str = Config.admin_name

        name = SystemInterface.make_name(name_str)
                                                               
        self.assertEqual(name.get("val"), Config.admin_name)

#+END_SRC


** Get User by email
   Gets user from the system from an email string.
   get_user_by_email : email_str -> user object

#+NAME: get_user_by_email
#+BEGIN_SRC python
    @staticmethod
    def get_user_by_email(email_str):
        try:
            email = SystemInterface.make_email(email_str)
            user = System.do("get_user_by_email", email=email)

            if user is None:
                raise StateError("User with email = %s is not found"
                                        % email_str)
            else:
                return user

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Get User from email
#+NAME: test_get_user_by_email
#+BEGIN_SRC python
class TestGetUserByEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_get_user_by_email_passes(self):
        print "test_get_user_by_email_passes"

        email_str = Config.admin_email
        user = SystemInterface.get_user_by_email(email_str)
                                                               
        self.assertEqual(user.get("email").get("val"), Config.admin_email)

#+END_SRC


** Authorize the User
   When a user is authorized, a default role is attached to the session. 

#+NAME: authorize_user
#+BEGIN_SRC python
    @staticmethod
    def authorize_user(email_str, session_key):
        try:
            user = SystemInterface.get_user_by_email(email_str)
            role = System.do("login_first_step", user=user)
            session_dict = {'email': email_str,
                                'role': str(role.get("val")),
                                'key': str(session_key)}

            session_obj = SystemInterface.make_session(session_dict)
            session = System.do("login_second_step", session=session_obj)
            return str(role.get("val"))

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test AuthorizeUser
#+NAME: test_authorize_user
#+BEGIN_SRC python
class TestAuthorizeUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_authorize_user_passes(self):
        print "test_authorize_user_passes"

        email = Config.admin_email
        session_key = "abcde"
        role_name = SystemInterface.authorize_user(email, session_key)
        self.assertEqual(role_name, Config.admin_role)

#+END_SRC


** Logout
#+NAME: logout
#+BEGIN_SRC python
    @staticmethod
    def logout(session_dict):
        try:
            session = SystemInterface.make_session(session_dict)
            return System.do("logout", session=session)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Logout
#+NAME: test_logout
#+BEGIN_SRC python
class TestLogout(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_logout_passes(self):
        print "test_logout_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        self.assertEqual(len(System.session_set), 1)

        session = SystemInterface.logout(session_dict)
        self.assertEqual(len(System.session_set), 0)

#+END_SRC



** AddUser
   add_user: session_dict, user_dict -> user
#+NAME: add_user
#+BEGIN_SRC python
    @staticmethod
    def add_user(session_dict, user_dict):
        try:
            session = SystemInterface.make_session(session_dict)
            user_dict['role'] = "user"
            new_user = SystemInterface.make_user(user_dict)
            return System.do("add_user", session=session, user=new_user)
   ##TODO:
   ## Return json object rather than pure object.
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Add User
#+NAME: test_add_user
#+BEGIN_SRC python
class TestAddUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_add_user_passes(self):
        print "test_add_user_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        user_dict = {'email': 'abc@gnu.org',
                             'name': "Test User" }

        ret_user = SystemInterface.add_user(session_dict, user_dict)

        self.assertEqual(ret_user.get("name").get("val"), 
                             user_dict['name'])

#+END_SRC


** DelUser
   del_user: session_dict, email -> user
#+NAME: del_user
#+BEGIN_SRC python
    @staticmethod
    def del_user(session_dict, email_str):
        try:
            session = SystemInterface.make_session(session_dict)
            user = SystemInterface.get_user_by_email(email_str)
            return System.do("del_user", session=session, user=user)

        except (ArityError, TypeError, NotAuthorizedError, StateError,
                    NotFoundError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Del User
#+NAME: test_del_user
#+BEGIN_SRC python
class TestDelUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_del_user_passes(self):
        print "test_del_user_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        user_dict = {'email': 'abc@gnu.org',
                             'role': Config.user_role,
                             'name': "Test User" }

        ret_user = SystemInterface.add_user(session_dict, user_dict)
        self.assertEqual(len(SystemInterface.show_users(session_dict)), 2)

        ret_user = SystemInterface.del_user(session_dict, "abc@gnu.org")
        self.assertEqual(len(SystemInterface.show_users(session_dict)), 1)


    def test_del_user_causes_state_error(self):
        print "test_del_user_causes_state_error"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        with self.assertRaises(StateError):
            SystemInterface.del_user(session_dict, Config.admin_email)

#+END_SRC


** ShowUsers
   show_users: session_dict -> list of user objects
#+NAME: show_users
#+BEGIN_SRC python
    @staticmethod
    def show_users(session_dict):
        try:
            session = SystemInterface.make_session(session_dict)
            users = System.do("show_users", session=session) 
            return users

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Show Users
#+NAME: test_show_users
#+BEGIN_SRC python
class TestShowUsers(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_show_users_passes(self):
        print "test_show_users_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        user_list = SystemInterface.show_users(session_dict)

        self.assertEqual(len(user_list), 1)

#+END_SRC


** ShowSessions
   show_sessions: session_dict -> list of session objects
#+NAME: show_sessions
#+BEGIN_SRC python
    @staticmethod
    def show_sessions(session_dict):
        try:
            session = SystemInterface.make_session(session_dict)
            sessions = System.do("show_sessions", session=session) 
            return sessions

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Show Sessions
#+NAME: test_show_sessions
#+BEGIN_SRC python
class TestShowSessions(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_show_sessions_passes(self):
        print "test_show_sessions_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        session_list = SystemInterface.show_sessions(session_dict)

        self.assertEqual(len(session_list), 1)

#+END_SRC


** ShowRoles
   Show all the roles in the system.
   show_roles: session_dict -> list of roles objects
#+NAME: show_roles
#+BEGIN_SRC python
    @staticmethod
    def show_roles(session_dict):
        try:
            session = SystemInterface.make_session(session_dict)
            roles = System.do("get_role_set", session=session) 
            return roles

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Show Roles
#+NAME: test_show_roles
#+BEGIN_SRC python
class TestShowRoles(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_show_roles_passes(self):
        print "test_show_roles_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        role_list = SystemInterface.show_roles(session_dict)

        self.assertEqual(len(role_list), 2)

#+END_SRC


** ShowUserDetails
   show_user_details: session_dict, email -> user
#+NAME: show_user_details
#+BEGIN_SRC python
    @staticmethod
    def show_user_details(session_dict, email_str):
        try:
            session = SystemInterface.make_session(session_dict)
            email = SystemInterface.make_email(email_str)
            return System.do("show_user_details", session=session, email=email)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Show User Details
#+NAME: test_show_user_details
#+BEGIN_SRC python
class TestShowUserDetails(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_show_user_details_passes(self):
        print "test_show_user_details_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        user = SystemInterface.show_user_details(session_dict, 
                                                     Config.admin_email)

        self.assertEqual(user.get("email").get("val"), Config.admin_email)

#+END_SRC


** SetNameoOfUser
   set_name_of_user: session_dict, email, name -> user
#+NAME: set_name_of_user
#+BEGIN_SRC python
    @staticmethod
    def set_name_of_user(session_dict, email_str, name_str):
        try:
            session = SystemInterface.make_session(session_dict)
            user = SystemInterface.get_user_by_email(email_str)
            name = SystemInterface.make_name(name_str)
            return System.do("set_name",
                                 session=session,
                                 name=name,
                                 user=user)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Set Name of a User
#+NAME: test_set_name_of_user
#+BEGIN_SRC python
class TestSetNameOfUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_set_name_of_user_passes(self):
        print "test_set_name_of_user_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        user = SystemInterface.set_name_of_user(session_dict, 
                                                    Config.admin_email,
                                                    "Temp Admin")
                                                    

        self.assertEqual(user.get("name").get("val"), "Temp Admin")

#+END_SRC



** SetEmailOfUser
   set_email_of_user: session_dict, email, email -> user
#+NAME: set_email_of_user
#+BEGIN_SRC python
    @staticmethod
    def set_email_of_user(session_dict, email_str, set_email_str):
        try:
            session = SystemInterface.make_session(session_dict)
            user = SystemInterface.get_user_by_email(email_str)
            email = SystemInterface.make_email(set_email_str)
            return System.do("set_email",
                                 session=session,
                                 email=email,
                                 user=user)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Set Email of a User
#+NAME: test_set_email_of_user
#+BEGIN_SRC python
class TestSetEmailOfUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_set_email_of_user_passes(self):
        print "test_set_email_of_user_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        user = SystemInterface.set_email_of_user(session_dict, 
                                                    Config.admin_email,
                                                    "tt@gnu.org")
                                                    

        self.assertEqual(user.get("email").get("val"), "tt@gnu.org")

#+END_SRC



** GetRolesOfUser
   get_roles_of_user: session_dict, email -> roles
#+NAME: get_roles_of_user
#+BEGIN_SRC python
    @staticmethod
    def get_roles_of_user(session_dict, email_str):
        try:
            session = SystemInterface.make_session(session_dict)
            user = SystemInterface.get_user_by_email(email_str)
            return System.do("get_roles_of_user", session=session, user=user)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Get Roles of User
#+NAME: test_get_roles_of_user
#+BEGIN_SRC python
class TestGetRolesOfUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_get_roles_of_user_passes(self):
        print "test_get_roles_of_user_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key

        roles = SystemInterface.get_roles_of_user(session_dict, 
                                                  Config.admin_email)

        self.assertEqual(roles[0].get("val"), Config.admin_name)
        self.assertEqual(len(roles), 1)

#+END_SRC


** AddRoleToUser
   add_role_to_user: session_dict, email, role -> user
#+NAME: add_role_to_user
#+BEGIN_SRC python
    @staticmethod
    def add_role_to_user(session_dict, email_str, role_str):
        try:
            session = SystemInterface.make_session(session_dict)
            user = SystemInterface.get_user_by_email(email_str)
            role = SystemInterface.make_role(role_str)
            return System.do("add_role_to_user", 
                             session=session,
                             user=user,
                             role=role)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Add Role to User
#+NAME: test_add_role_to_user
#+BEGIN_SRC python
class TestAddRoleToUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_add_role_to_user_passes(self):
        print "test_add_role_to_user_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key
        
        user_dict = {'email': 'abc@gnu.org',
                             'role': Config.user_role,
                             'name': "Test User" }

        user = SystemInterface.add_user(session_dict, user_dict)
        self.assertEqual(len(user.get("roles")), 1)
        user = SystemInterface.add_role_to_user(session_dict,
                                                    "abc@gnu.org",
                                                    Config.admin_role)
        self.assertEqual(len(user.get("roles")), 2)

#+END_SRC


** DelRoleOfUser
   del_role_of_user: session_dict, email, role -> user
#+NAME: del_role_of_user
#+BEGIN_SRC python
    @staticmethod
    def del_role_of_user(session_dict, email_str, role_str):
        try:
            session = SystemInterface.make_session(session_dict)
            user = SystemInterface.get_user_by_email(email_str)
            role = SystemInterface.make_role(role_str)
            return System.do("del_role_of_user", 
                             session=session,
                             user=user,
                             role=role)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test Del Role of User
#+NAME: test_del_role_of_user
#+BEGIN_SRC python
class TestDelRoleOfUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        Config.populate_db()
        SystemInterface.initialize(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        System.delegate = None

    def test_del_role_of_user_passes(self):
        print "test_del_role_of_user_passes"

        email = Config.admin_email
        key = "abcde"
        role_name = SystemInterface.authorize_user(email, key)

        session_dict = {}
        session_dict['email'] = email
        session_dict['role'] = role_name
        session_dict['key'] = key
        
        user_dict = {'email': 'abc@gnu.org',
                             'role': Config.user_role,
                             'name': "Test User" }


        user = SystemInterface.add_user(session_dict, user_dict)

        self.assertEqual(len(user.get("roles")), 1)

        user = SystemInterface.add_role_to_user(session_dict,
                                                    "abc@gnu.org",
                                                    Config.admin_role)
        self.assertEqual(len(user.get("roles")), 2)

        user = SystemInterface.del_role_of_user(session_dict,
                                                    "abc@gnu.org",
                                                    Config.admin_role)
        self.assertEqual(len(user.get("roles")), 1)

#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+NAME: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.system import *
from runtime.exceptions.custom_exceptions import *

#+END_SRC


** Tests
*** Imports 
#+NAME: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError

from system_interface import *
from runtime.system.persistence_delegate import *
from runtime.rest.app import create_app

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+END_SRC

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>
<<make_session>>
<<make_user>>
<<make_email>>
<<make_name>>
<<make_role>>
<<authorize_user>>
<<logout>>
<<add_user>>
<<del_user>>
<<show_users>>
<<show_user_details>>
<<show_roles>>
<<get_user_by_email>>
<<set_name_of_user>>
<<set_email_of_user>>
<<get_roles_of_user>>
<<add_role_to_user>>
<<del_role_of_user>>
<<show_sessions>>

#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>
<<test_make_session>>
<<test_make_user>>
<<test_make_role>>
<<test_make_name>>
<<test_make_email>>
<<test_authorize_user>>
<<test_logout>>
<<test_add_user>>
<<test_del_user>>
<<test_show_users>>
<<test_show_user_details>>
<<test_show_roles>>
<<test_get_user_by_email>>
<<test_set_name_of_user>>
<<test_set_email_of_user>>
<<test_get_roles_of_user>>
<<test_add_role_to_user>>
<<test_del_role_of_user>>
<<test_show_sessions>>
<<run_test_cases>>

#+END_SRC
