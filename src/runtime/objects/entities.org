#+TITLE: Entities
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

In the object implementation of the User Directory, all entities are Objects.
In addition, there is an object called =System= that holds the state of the
application (=user-set=, =session-set=, etc.).

Each of the entities of the data model is implemented as
an object.  Each entity is defined via a class definition, a
constructor and getter and setter methods that access and
mutate the fields of the entity. 

The main idea in the object model is that certain relations
of the data model (those that are total functions) are
implemented as /fields/.  For example the =User= object has
a field called =val= that holds an object of type =Email=.

As a start, we do not implement all relations of the data
model.  For example, the relation =user: Email > User?= is
not implemented.  It should be, if we desire to have an
implementation that is /complete/ with respect to the data
model.  Which elements of the data model are implemented and
which are not are decisions based on the end user
requirements of the application.


* Base Classes
#+NAME: base_classes
#+BEGIN_SRC python
Name = ClassTemplate.mk_class("Name")
Email = ClassTemplate.mk_class("Email")
Role = ClassTemplate.mk_class("Role")
User = ClassTemplate.mk_class("User")
Session = ClassTemplate.mk_class("Session")

#+END_SRC


* Type Predicates
#+NAME: type_predicates
#+BEGIN_SRC python
is_name = is_inst(Name)
check_name = check_pred(is_name)

is_email = is_inst(Email)
check_email = check_pred(is_email)

is_role = is_inst(Role)
check_role = check_pred(is_role)

is_user = is_inst(User)
check_user = check_pred(is_user)

is_session = is_inst(Session)
check_session = check_pred(is_session)


def are_roles_or_empty_list(rls):
    ret_val = True

    if is_list(rls):
        for rl in rls:
            if not is_role(rl):
                ret_val = False
    else:
        ret_val = False

    return ret_val

def is_user_status(s):
    ret_val = True

    if is_str(s) and (s=="active" or s=="inactive"):
        ret_val = True
    else:        
        ret_val = False

    return ret_val

#+END_SRC


* Name
=Name= is a value class with type =is_alphabetic_str=.

#+NAME: class_Name
#+begin_src python
Name.add_attributes(val=is_alphabetic_str)
Name.__eq__ = lambda self, other: \
                  is_name(other) and \
                  self.get("val") == other.get("val")

#+end_src

*** Test Name
#+NAME: class_TestName
#+BEGIN_SRC python
class TestName(TestCase):
    TESTING = True

    def test_instantiate_name(self):
        print "test_instantiate_name"
        self.assertEqual(is_name(Name(val="Jimi Hendrix")), True)
        self.assertEqual(Name(val="Jimi Hendrix").get("val"), "Jimi Hendrix")
        self.assertRaises(TypeError, Name, val="Jimi 123 Hendrix")

    def test_name_equality(self):
        print "test_name_equality"
        self.assertEqual(Name(val="Jimi Hendrix") == 
                         Name(val="Jimi Hendrix"), 
                         True)

        self.assertEqual(Name(val="Jimi Hendrix") == 
                         Name(val="Bo Didley"), 
                         False)

#+END_SRC


* Email
=Email= is a value class with type =is_email_str=.
#+NAME: class_Email
#+begin_src python
Email.add_attributes(val=is_email_str)

Email.__eq__ = lambda self, other: \
                  is_email(other) and \
                  self.get("val") == other.get("val")

#+end_src

** Test Email
#+NAME: class_TestEmail
#+BEGIN_SRC python
class TestEmail(TestCase):
    TESTING = True

    def test_instantiate_email(self):
        print "test_instantiate_email"
        self.assertEqual(is_email(Email(val="jimi@gnu.org")), True)
        self.assertEqual(Email(val="jimi@gnu.org").get("val"),
                             "jimi@gnu.org")
        self.assertRaises(TypeError, Name, val="jimi@@gnu.org")


    def test_equality_of_email(self):
        print "test_equality_of_email"
        self.assertEqual(Email(val="jimi@gnu.org") ==
                             Email(val="jimi@gnu.org"), True)
        
        self.assertEqual(Email(val="didley@gnu.org") ==
                             Email(val="jimi@gnu.org"), False)

#+END_SRC


* Role
   =Role= is an entity that has a field =name= which is an alphabetic string

#+NAME: class_Role
#+BEGIN_SRC python
Role = ClassTemplate.mk_class("Role", 
                              val=is_alphabetic_str)

Role.__eq__ = lambda self,other: \
            is_role(other) and \
	    self.get("val") == other.get("val")

Role.admin = Role(val="admin")
Role.user = Role(val="user")
Role.is_admin = lambda role: role.name == 'admin'
Role.is_user = lambda role: role.guest == 'user'

#+END_SRC

** Test Role
#+NAME: class_TestRole
#+BEGIN_SRC python
class TestRole(TestCase):
    TESTING = True

    def test_instantiate_role(self):
        print "test_instantiate_role"
        a_role = Role(val="admin")
        self.assertEqual(is_role(a_role), True)
        self.assertEqual(a_role.get("val"), "admin")
        self.assertRaises(TypeError, Role, my_name="admin123")

    def test_set_and_get_role(self):
        print "test_sets_on_role"
        u_role = Role(val="user")
        self.assertEqual(u_role.get("val"), "user")
        u_role.set(val="admin")
        self.assertEqual(u_role.get("val"), "admin")

#+END_SRC


* User
  A =User= entity has fields =name= of type =Name=, =email= of type =Email= and
  role of type =Role=.

#+NAME: class_User
#+BEGIN_SRC python
User.add_attributes(name=is_name, 
                    email=is_email,
                    roles=are_roles_or_empty_list)

User.__eq__ = lambda self, other: \
                  is_user(other) and \
                  self.get("email") == other.get("email")

def append_role(self, role):
    if is_role(role):
        roles = self.get('roles')
        roles.append(role)
        self.set(roles=roles)

User.append_role = append_role

#+END_SRC

** Test User
#+Name: class_TestUser
#+BEGIN_SRC python
class TestUser(TestCase):
    TESTING = True

    def test_instantiate_user(self):
        print "test_instantiate_user"
        user = User(name=Name(val="Jimi Hendrix"),
                    email=Email(val="jimi@gnu.org"),
                    roles=[])

        self.assertEqual(is_user(user), True)

    def test_sets_on_user(self):
        print "test_sets_on_user"
        user = User(name=Name(val="Jimi Hendrix"),
                    email=Email(val="jimi@gnu.org"),
                    roles=[Role(val="user")]
                    )

        self.assertEqual(user.get("name").get("val"), "Jimi Hendrix")
        self.assertEqual(user.get("email").get("val"), "jimi@gnu.org")
        self.assertEqual(user.get("roles")[0].get("val"), "user")

    def test_equality_on_user(self):
        print "test_equality_on_user"
        user1 = User(name=Name(val="Jimi Hendrix"),
                     email=Email(val="jimi@gnu.org"),
                     roles=[])

        user2 = User(name=Name(val="Jimi Hendrix"),
                     email=Email(val="jimi@gnu.org"),
                     roles=[]) 

        user3 = User(name=Name(val="John Roy"),
                     email=Email(val="roy@gnu.org"),
                     roles=[])

        self.assertEqual(user1 == user2, True)
        self.assertEqual(user1 == user3, False)
        
    def test_append_role(self):
        print "test_append_role"
        user = User(name=Name(val="Jimi Hendrix"),
                     email=Email(val="jimi@gnu.org"),
                     roles=[])

        user.append_role(Role(val="user"))
        self.assertTrue(len(user.get('roles')) == 1)

#+END_SRC


* Session
    A session stores the user information.  The session object defines the set
    of operations allowed by the system.

#+NAME: class_Session
#+BEGIN_SRC python
Session.add_attributes(user=is_user, role=is_role, key=is_str)
Session.__eq__ = lambda self, other: \
                  is_session(other) and \
                  self.get("user") == other.get("user") and \
                  self.get("role") == other.get("role") and \
                  self.get("key") == other.get("key")

#+END_SRC

** Test Session

   Test cases to test Seesion entity

#+NAME: class_TestSession
#+BEGIN_SRC python
class TestSession(TestCase):
    TESTING = True

    def test_instantiate_session(self):
        print "test_instantiate_user"
        user = User(name=Name(val="Jimi Hendrix"),
                    email=Email(val="jimi@gnu.org"),
                    roles=[])

        role = Role(val="admin")
        d_key = "kdshfkjdahfjdhfkjd"
        session = Session(user=user, role=role, key=d_key)
        self.assertEqual(is_session(session), True)

    def test_sets_on_session(self):
        print "test_sets_on_session"
        user = User(name=Name(val="Jimi Hendrix"),
                    email=Email(val="jimi@gnu.org"),
                    roles=[])

        role = Role(val="admin")
        d_key = "kdshfkjdahfjdhfkjd"
        session = Session(user=user, role=role, key=d_key)

        user = User(name=Name(val="Bo Didley"),
                    email=Email(val="didley@gnu.org"),
                    roles=[])

        session.set(user=user)
        self.assertEqual(session.get("user").get("email").get("val"),
                         "didley@gnu.org")

    def test_equality_on_session(self):
        print "test_equality_on_session"
        role1 = Role(val="admin")
        role2 = Role(val="user")

        user1 = User(name=Name(val="Jimi Hendrix"),
                    email=Email(val="jimi@gnu.org"),
                    roles=[role1])

        user2 = User(name=Name(val="Jimi Hendrix"),
                    email=Email(val="jimi@gmail.org"),
                    roles=[role1])

        d_key = "kdshfkjdahfjdhfkjd"

        session1 = Session(user=user1, role=role1, key=d_key)
        session2 = Session(user=user1, role=role1, key=d_key)
        session3 = Session(user=user2, role=role1, key=d_key)
        self.assertEqual(session1 == session2, True)
        self.assertEqual(session1 == session3, False)

#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.utils.type_utils import *
from runtime.utils.class_templates import *
from runtime.exceptions.custom_exceptions import *

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from entities import *

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<base_classes>>
<<type_predicates>>
<<class_Name>>
<<class_Email>>
<<class_Role>>
<<class_User>>
<<class_Session>>

#+end_src


** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestName>>
<<class_TestEmail>>
<<class_TestRole>>
<<class_TestUser>>
<<class_TestSession>>
<<run_test_cases>>
#+end_src
